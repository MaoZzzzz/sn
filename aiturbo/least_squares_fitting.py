import math


def cpu_efficiency_ps(a, b, d, x) -> float:
    cpu_eff = float(a) * math.exp(float(b) * float(x) * -1) + float(d)
    return cpu_eff


vgg11_cpu_ps = [-7.74, 2.3719, 8.795]
vgg16_cpu_ps = [-7.03, 3.6715, 5.598]
vgg19_cpu_ps = [-6.68, 4.2738, 5.652]
lenet_cpu_ps = [-11.94, 3.7612, 7.619]
googlenet_cpu_ps = [-0.89, 1.4462, 1.909]
overfeat_cpu_ps = [-3.65, 3.742, 5.213]
alexnet_cpu_ps = [-14.38, 1.639, 15.734]
trivial_cpu_ps = [-19.65, 2.291, 21.532]
inception3_cpu_ps = [-1.837, 1.477, 2.813]
inception4_cpu_ps = [-4.806, 2.853, 5.236]
resnet50_cpu_ps = [-1.975, 1.884, 2.799]
resnet101_cpu_ps = [-2.433, 2.349, 3.395]
resnet152_cpu_ps = [-3.975, 2.784, 4.817]
mobilenet_cpu_ps = [2.723, 2.212, 3.671]

a = cpu_efficiency_ps(
    vgg11_cpu_ps[0], vgg11_cpu_ps[1], vgg11_cpu_ps[2], 5)
vgg11 = [[128, 1, 1, a, 1, 1, 1], [
    128, 1, 1, a, 1, 1, 2], [128 / 2, 1, 2, a * 2, 2, 1, 2], [128 / 3, 1, 3, a * 3, 3, 1, 3],
         [128, 1, 0.5, a * 0.5, 1, 2, 1], [128, 1, 0.5, a * 0.5, 1, 2, 2], [128 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    vgg16_cpu_ps[0], vgg16_cpu_ps[1], vgg16_cpu_ps[2], 5)
vgg16 = [[64, 1, 1, a, 1, 1, 1], [
    64, 1, 1, a, 1, 1, 2], [64 / 2, 1, 2, a * 2, 2, 1, 2], [64 / 3, 1, 3, a * 3, 3, 1, 3],
         [64, 1, 0.5, a * 0.5, 1, 2, 1], [64, 1, 0.5, a * 0.5, 1, 2, 2], [64 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    vgg19_cpu_ps[0], vgg19_cpu_ps[1], vgg19_cpu_ps[2], 5)
vgg19 = [[32, 1, 1, a, 1, 1, 1], [
    32, 1, 1, a, 1, 1, 2], [32 / 2, 1, 2, a * 2, 2, 1, 2], [32 / 3, 1, 3, a * 3, 3, 1, 3],
         [32, 1, 0.5, a * 0.5, 1, 2, 1], [32, 1, 0.5, a * 0.5, 1, 2, 2], [32 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    lenet_cpu_ps[0], lenet_cpu_ps[1], lenet_cpu_ps[2], 5)
lenet = [[1024, 1, 1, a, 1, 1, 1], [
    1024, 1, 1, a, 1, 1, 2], [1024 / 2, 1, 2, a * 2, 2, 1, 2], [1024 / 3, 1, 3, a * 3, 3, 1, 3],
           [1024, 1, 0.5, a * 0.5, 1, 2, 1], [1024, 1, 0.5, a * 0.5, 1, 2, 2], [1024 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    googlenet_cpu_ps[0], googlenet_cpu_ps[1], googlenet_cpu_ps[2], 5)
googlenet = [[32, 1, 1, a, 1, 1, 1], [
    32, 1, 1, a, 1, 1, 2], [32 / 2, 1, 2, a * 2, 2, 1, 2], [32 / 3, 1, 3, a * 3, 3, 1, 3],
         [32, 1, 0.5, a * 0.5, 1, 2, 1], [32, 1, 0.5, a * 0.5, 1, 2, 2], [32 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    overfeat_cpu_ps[0], overfeat_cpu_ps[1], overfeat_cpu_ps[2], 5)
overfeat = [[512, 1, 1, a, 1, 1, 1], [
    512, 1, 1, a, 1, 1, 2], [512 / 2, 1, 2, a * 2, 2, 1, 2], [512 / 3, 1, 3, a * 3, 3, 1, 3],
           [512, 1, 0.5, a * 0.5, 1, 2, 1], [512, 1, 0.5, a * 0.5, 1, 2, 2], [512 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    alexnet_cpu_ps[0], alexnet_cpu_ps[1], alexnet_cpu_ps[2], 5)
alexnet = [[1024, 1, 1, a, 1, 1, 1], [
    1024, 1, 1, a, 1, 1, 2], [1024 / 2, 1, 2, a * 2, 2, 1, 2], [1024 / 3, 1, 3, a * 3, 3, 1, 3],
           [1024, 1, 0.5, a * 0.5, 1, 2, 1], [1024, 1, 0.5, a * 0.5, 1, 2, 2], [1024 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    trivial_cpu_ps[0], trivial_cpu_ps[1], trivial_cpu_ps[2], 5)
trivial = [[1024, 1, 1, a, 1, 1, 1], [
    1024, 1, 1, a, 1, 1, 2], [1024 / 2, 1, 2, a * 2, 2, 1, 2], [1024 / 3, 1, 3, a * 3, 3, 1, 3],
           [1024, 1, 0.5, a * 0.5, 1, 2, 1], [1024, 1, 0.5, a * 0.5, 1, 2, 2], [1024 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    inception3_cpu_ps[0], inception3_cpu_ps[1], inception3_cpu_ps[2], 5)
inception3 = [[64, 1, 1, a, 1, 1, 1], [
    64, 1, 1, a, 1, 1, 2], [64 / 2, 1, 2, a * 2, 2, 1, 2], [64 / 3, 1, 3, a * 3, 3, 1, 3],
           [64, 1, 0.5, a * 0.5, 1, 2, 1], [64, 1, 0.5, a * 0.5, 1, 2, 2], [64 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    inception4_cpu_ps[0], inception4_cpu_ps[1], inception4_cpu_ps[2], 5)
inception4 = [[32, 1, 1, a, 1, 1, 1], [
    32, 1, 1, a, 1, 1, 2], [32 / 2, 1, 2, a * 2, 2, 1, 2], [32 / 3, 1, 3, a * 3, 3, 1, 3],
           [32, 1, 0.5, a * 0.5, 1, 2, 1], [32, 1, 0.5, a * 0.5, 1, 2, 2], [32 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    resnet50_cpu_ps[0], resnet50_cpu_ps[1], resnet50_cpu_ps[2], 5)
resnet50 = [[64, 1, 1, a, 1, 1, 1], [
    64, 1, 1, a, 1, 1, 2], [64 / 2, 1, 2, a * 2, 2, 1, 2], [64 / 3, 1, 3, a * 3, 3, 1, 3],
           [64, 1, 0.5, a * 0.5, 1, 2, 1], [64, 1, 0.5, a * 0.5, 1, 2, 2], [64 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    resnet101_cpu_ps[0], resnet101_cpu_ps[1], resnet101_cpu_ps[2], 5)
resnet101 = [[64, 1, 1, a, 1, 1, 1], [
    64, 1, 1, a, 1, 1, 2], [64 / 2, 1, 2, a * 2, 2, 1, 2], [64 / 3, 1, 3, a * 3, 3, 1, 3],
           [64, 1, 0.5, a * 0.5, 1, 2, 1], [64, 1, 0.5, a * 0.5, 1, 2, 2], [64 / 2, 1, 1, a * 1, 2, 2, 2]]
a = cpu_efficiency_ps(
    resnet152_cpu_ps[0], resnet152_cpu_ps[1], resnet152_cpu_ps[2], 5)
resnet152 = [[32, 1, 1, a, 1, 1, 1], [
    32, 1, 1, a, 1, 1, 2], [32 / 2, 1, 2, a * 2, 2, 1, 2], [32 / 3, 1, 3, a * 3, 3, 1, 3],
           [32, 1, 0.5, a * 0.5, 1, 2, 1], [32, 1, 0.5, a * 0.5, 1, 2, 2], [32 / 2, 1, 1, a * 1, 2, 2, 2]]
nasnet = []
a = cpu_efficiency_ps(
    mobilenet_cpu_ps[0], mobilenet_cpu_ps[1], mobilenet_cpu_ps[2], 5)
mobilenet = [[1024, 1, 1, a, 1, 1, 1], [
    1024, 1, 1, a, 1, 1, 2], [1024 / 2, 1, 2, a * 2, 2, 1, 2], [1024 / 3, 1, 3, a * 3, 3, 1, 3],
           [1024, 1, 0.5, a * 0.5, 1, 2, 1], [1024, 1, 0.5, a * 0.5, 1, 2, 2], [1024 / 2, 1, 1, a * 1, 2, 2, 2]]

print(googlenet)
# A = np.array(vgg11)
# b = np.array(vgg11_speed)
# print(nnls(A, b, 100000000))
